[[plugins]]
repo = "kevinhwang91/nvim-bqf"
on_event = "QuickFixCmdPre"
on_cmd = "copen"
on_source = "diaglist.nvim"

[[plugins]]
repo = "j-hui/fidget.nvim"
on_event = "CursorHold"
lua_source = '''
	require("fidget").setup {
		notification = {
			override_vim_notify = true,
		}
	}
'''

[[plugins]]
repo = "kevinhwang91/nvim-ufo"
on_source = "nvim-treesitter"
on_lua = "ufo"
on_cmd = "loadview"
depends = ["promise-async", "nvim-treesitter"]
lua_source = '''
	vim.o.foldlevel = 99
	vim.o.foldlevelstart = 99
	vim.o.foldenable = true
	require "ufo".setup {
		provider_selector = function()
			return { "treesitter", "indent" }
		end,
		fold_virt_text_handler = function(virtText, lnum, endLnum, width, truncate)
			local newVirtText = {}
			local suffix = ('   %d '):format(endLnum - lnum)
			local sufWidth = vim.fn.strdisplaywidth(suffix)
			local targetWidth = width - sufWidth
			local curWidth = 0
			for _, chunk in ipairs(virtText) do
				local chunkText = chunk[1]
				local chunkWidth = vim.fn.strdisplaywidth(chunkText)
				if targetWidth > curWidth + chunkWidth then
					table.insert(newVirtText, chunk)
				else
					chunkText = truncate(chunkText, targetWidth - curWidth)
					local hlGroup = chunk[2]
					table.insert(newVirtText, { chunkText, hlGroup })
					chunkWidth = vim.fn.strdisplaywidth(chunkText)
					-- str width returned from truncate() may less than 2nd argument, need padding
					if curWidth + chunkWidth < targetWidth then
						suffix = suffix .. (' '):rep(targetWidth - curWidth - chunkWidth)
					end
					break
				end
				curWidth = curWidth + chunkWidth
			end
			table.insert(newVirtText, { suffix, 'MoreMsg' })
			return newVirtText
		end
	}
'''

[[plugins]]
repo = "nvim-zh/colorful-winsep.nvim"
on_event = "WinNew"
lua_source = "require 'colorful-winsep'.setup()"

[[plugins]]
repo = "delphinus/skkeleton_indicator.nvim"
on_event = "InsertEnter"
lua_source = '''
vim.api.nvim_set_hl(0, "SkkeletonIndicatorEiji",
  { fg = "#88c0d0", bg = "#2e3440", bold = true })
vim.api.nvim_set_hl(0, "SkkeletonIndicatorHira",
  { fg = "#2e3440", bg = "#a3be8c", bold = true })
vim.api.nvim_set_hl(0, "SkkeletonIndicatorKata",
  { fg = "#2e3440", bg = "#ebcb8b", bold = true })
vim.api.nvim_set_hl(0, "SkkeletonIndicatorHankata",
  { fg = "#2e3440", bg = "#b48ead", bold = true })
vim.api.nvim_set_hl(0, "SkkeletonIndicatorZenkaku",
  { fg = "#2e3440", bg = "#88c0d0", bold = true })
vim.api.nvim_set_hl(0, "SkkeletonIndicatorAbbrev",
  { fg = "#e5e9f0", bg = "#bf616a", bold = true })
require('skkeleton_indicator').setup {
	-- eijiText = "󱌯",
	-- hiraText = "󱌴",
	-- kataText = "󱌵",
	-- hankataText = "󱌶",
	-- zenkakuText = "󱌭",
	-- aboutText = "󰥤",
}
'''

[[plugins]]
repo = "mcauley-penney/visual-whitespace.nvim"
on_event = "CursorMoved"
lua_source = '''
require 'visual-whitespace'.setup {}
'''

[[plugins]]
repo = "miversen33/sunglasses.nvim"
on_event = "UIEnter"
lua_source = '''
require('sunglasses').setup {
	filter_type = 'SHADE',
	filter_percent = .3,
}
'''
