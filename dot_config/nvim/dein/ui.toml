[[plugins]]
repo = "kevinhwang91/nvim-bqf"
on_event = "QuickFixCmdPre"
on_cmd = "copen"
on_source = "diaglist.nvim"

[[plugins]]
repo = "j-hui/fidget.nvim"
on_event = "CursorHold"
lua_source = '''
	require("fidget").setup {
		notification = {
			override_vim_notify = true,
		}
	}
'''

[[plugins]]
repo = "kevinhwang91/nvim-ufo"
on_source = "nvim-treesitter"
on_lua = "ufo"
on_cmd = "loadview"
depends = ["promise-async", "nvim-treesitter"]
lua_source = '''
	vim.o.foldlevel = 99
	vim.o.foldlevelstart = 99
	vim.o.foldenable = true
	require "ufo".setup {
		provider_selector = function()
			return { "treesitter", "indent" }
		end,
		fold_virt_text_handler = function(virtText, lnum, endLnum, width, truncate)
			local newVirtText = {}
			local suffix = ('  ï’Œ %d '):format(endLnum - lnum)
			local sufWidth = vim.fn.strdisplaywidth(suffix)
			local targetWidth = width - sufWidth
			local curWidth = 0
			for _, chunk in ipairs(virtText) do
				local chunkText = chunk[1]
				local chunkWidth = vim.fn.strdisplaywidth(chunkText)
				if targetWidth > curWidth + chunkWidth then
					table.insert(newVirtText, chunk)
				else
					chunkText = truncate(chunkText, targetWidth - curWidth)
					local hlGroup = chunk[2]
					table.insert(newVirtText, { chunkText, hlGroup })
					chunkWidth = vim.fn.strdisplaywidth(chunkText)
					-- str width returned from truncate() may less than 2nd argument, need padding
					if curWidth + chunkWidth < targetWidth then
						suffix = suffix .. (' '):rep(targetWidth - curWidth - chunkWidth)
					end
					break
				end
				curWidth = curWidth + chunkWidth
			end
			table.insert(newVirtText, { suffix, 'MoreMsg' })
			return newVirtText
		end
	}
'''

[[plugins]]
repo = "nvim-zh/colorful-winsep.nvim"
on_event = "WinNew"
lua_source = "require 'colorful-winsep'.setup()"
