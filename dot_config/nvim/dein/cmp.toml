[[plugins]]
repo = "hrsh7th/cmp-nvim-lsp"
[[plugins]]
repo = "hrsh7th/vim-vsnip"
[[plugins]]
repo = "hrsh7th/cmp-buffer"
[[plugins]]
repo = "hrsh7th/cmp-cmdline"
[[plugins]]
repo = "hrsh7th/cmp-nvim-lsp-signature-help"
[[plugins]]
repo = "petertriho/cmp-git"
depends = "plenary.nvim"
lua_source = "require 'cmp_git'.setup()"
[[plugins]]
repo = "lukas-reineke/cmp-under-comparator"

[[plugins]]
repo = "github/copilot.vim"
hook_add = '''
let g:copilot_no_tab_map = v:true
let g:copilot_assume_mapped = v:true
let g:copilot_tab_fallback = ""
'''

[[plugins]]
repo = "hrsh7th/nvim-cmp"
depends = [
	"cmp-nvim-lsp",
	"vim-vsnip",
	"cmp-buffer",
	"cmp-cmdline",
	"cmp-nvim-lsp-signature-help",
	"cmp-git",
	"cmp-under-comparator",
	"copilot.vim",
]
on_event = ["InsertEnter", "CmdlineEnter"]
lua_source = '''
	local cmp = require 'cmp'
	local function feedkeys(key)
		vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(key, true, true, true) or "", "", true)
	end
	cmp.setup {
		snippet = {
			expand = function(args)
				vim.fn["vsnip#anonymous"](args.body)
			end
		},
		window = {
			documentation = cmp.config.window.bordered()
		},
		sources = cmp.config.sources {
			{ name = 'nvim_lsp' },
			{ name = 'vsnip' },
			{ name = 'nvim_lsp_signature_help' },
		},
		comparators = {
			cmp.config.compare.offset,
			cmp.config.compare.exact,
			cmp.config.compare.score,
			require "cmp-under-comparator".under,
			cmp.config.compare.kind,
			cmp.config.compare.sort_text,
			cmp.config.compare.length,
			cmp.config.compare.order,
		},
		mapping = cmp.mapping.preset.insert {
			["<C-p>"] = cmp.mapping.select_prev_item(),
			["<C-n>"] = cmp.mapping.select_next_item(),
			["<C-b>"] = cmp.mapping.scroll_docs(-4),
			["<C-f>"] = cmp.mapping.scroll_docs(4),
			["<tab>"] = cmp.mapping(function(fallback)
				if cmp.visible() then
					local entry = cmp.get_selected_entry()
					if not entry then
						cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
					else
						cmp.confirm()
					end
				elseif vim.fn["vsnip#jumpable"](1) == 1 then
					feedkeys("<Plug>(vsnip-jump-next)")
				else
					local copilot_keys = vim.fn["copilot#Accept"]()
					if copilot_keys ~= "" then
						vim.api.nvim_feedkeys(copilot_keys, "i", true)
					else
						fallback()
					end
					-- fallback()
				end
			end),
			["<s-tab>"] = cmp.mapping(function(fallback)
				if vim.fn["vsnip#jumpable"](-1) == 1 then
					feedkeys("<Plug>(vsnip-jump-prev)")
				else
					fallback()
				end
			end),
		}
	}
	cmp.setup.cmdline({ '/', '?' }, {
		mapping = cmp.mapping.preset.cmdline(),
		sources = {
			{ name = 'buffer' }
		}
	})
	cmp.setup.cmdline(':', {
		mapping = cmp.mapping.preset.cmdline(),
		sources = cmp.config.sources {
			{ name = 'cmdline' }
		}
	})
	cmp.setup.filetype('gitcommit', {
		sources = cmp.config.sources({
			{ name = 'git' },
		})
	})
'''
