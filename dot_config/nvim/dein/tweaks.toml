[[plugins]]
repo = "Shougo/dein.vim"
on_event = "CmdlineEnter"

[[plugins]]
repo = "hrsh7th/nvim-insx"
on_event = "InsertEnter"
lua_source = "require 'insx.preset.standard'.setup()"

[[plugins]]
repo = "cshuaimin/ssr.nvim"
on_lua = "ssr"
lua_add = '''
	vim.keymap.set({ "n", "x" }, "<leader>/", function() require("ssr").open() end)
'''

[[plugins]]
repo = "gw31415/scrollUptoLastLine.vim"
on_map = { niv = '<MouseUp>' }
lua_source = "vim.keymap.set({'', 'i'}, '<S-MouseUp>', '<Nop>')"

[[plugins]]
repo = "gw31415/mkdir.vim"
on_event = "BufWritePre"

[[plugins]]
repo = "delphinus/cellwidths.nvim"
on_event = "UIEnter"
lua_source = "require 'cellwidths'.setup { name = 'cica' }"

[[plugins]]
repo = "kylechui/nvim-surround"
rev = "v2.1.5"
on_map = {
	n = [
		"ys",
		"yss",
		"yS",
		"ySS",
		"ds",
		"cs",
		"cS",
	], 
	i = [
		"<C-g>s",
		"<C-g>S",
	],
	x = [
		"S",
		"gS",
	],
}
lua_source = """
local M = require 'nvim-surround'
require 'nvim-surround'.setup {
	surrounds = {
		["3"] = {
			add = { "'''", "'''" },
		},
	}
}
"""

[[plugins]]
repo = "glts/vim-textobj-comment"
on_map = { ox = ["ic", "ac"] }
depends = "vim-textobj-user"

[[plugins]]
repo = "kana/vim-textobj-entire"
on_map = { ox = ["ae", "ie"] }
depends = "vim-textobj-user"

[[plugins]]
repo = "osyo-manga/vim-operator-stay-cursor"
on_func = "operator#stay_cursor#wrapper"
depends = "vim-operator-user"
hook_add = "map <expr> gq operator#stay_cursor#wrapper('gq')"

[[plugins]]
repo = "gbprod/substitute.nvim"
on_lua = "substitute"
lua_add = '''
	vim.keymap.set("n", "_",  function() require 'substitute'.operator() end)
	vim.keymap.set("x", "_",  function() require 'substitute'.visual()   end)
	vim.keymap.set("n", "__", function() require 'substitute'.line()     end)
'''
lua_source = "require 'substitute'.setup()"

[[plugins]]
repo = "jiaoshijie/undotree"
depends = "plenary.nvim"
on_map = { n = '<Leader>u' }
lua_source = '''
	require 'undotree'.setup { keymaps = { ["<Esc>"] = "quit" } }
	vim.keymap.set('n', '<Leader>u', require 'undotree'.toggle)
'''

[[plugins]]
repo = "simeji/winresizer"
on_map = "<c-w>"
lua_source = 'vim.api.nvim_set_var("winresizer_start_key", "<C-W>e")'

[[plugins]]
repo = "thinca/vim-ambicmd"
on_event = "CmdlineEnter"
lua_source = '''
vim.keymap.set("c", "<Space>", function()
	return vim.fn["ambicmd#expand"]("<Space>")
end, { expr = true })
'''

[[plugins]]
repo = "gw31415/fzyselect.vim"
on_event = "CursorHold"
lua_source = '''
	vim.api.nvim_create_autocmd("FileType", {
		pattern = "fzyselect",
		callback = function()
			vim.keymap.set("n", "i", "<Plug>(fzyselect-fzy)", { buffer = true })
			vim.keymap.set("n", "<cr>", "<Plug>(fzyselect-retu)", { buffer = true })
			vim.keymap.set("n", "<esc>", "<cmd>clo<cr>", { buffer = true })
			vim.opt_local.number = false
		end,
	})
	-- fuzzy search
	vim.keymap.set('n', "gl", function()
		local winid = vim.api.nvim_get_current_win()
		require 'fzyselect'.start(vim.api.nvim_buf_get_lines(0, 0, -1, true),
			{ prompt = "fuzzy search: <Enter> to jump" },
			function(_, i)
				if i then
					vim.api.nvim_win_set_cursor(winid, { i, 0 })
				end
			end)
	end)
	-- git ls-files
	vim.keymap.set("n", "<c-p>", function()
		---@diagnostic disable-next-line: undefined-field
		local res = vim.system({ 'git', 'ls-files' }, { text = true }):wait()
		if res.code ~= 0 then
			vim.notify(vim.fn.trim(res.stderr), vim.log.levels.ERROR, { title = "fzyselect: git ls-files" })
		else
			require 'fzyselect'.start(vim.fn.split(res.stdout, '\n'),
				{ prompt = 'git ls-files: <Enter> to edit' },
				function(path)
					if path then vim.cmd.edit(path) end
				end)
		end
	end)
'''
lua_post_source = "vim.ui.select = require 'fzyselect'.start"
[[plugins]]
repo = "gw31415/bufmanager.nvim"
depends = "fzyselect.vim"
on_event = "BufAdd"
lua_source = '''
vim.keymap.set("n", "gb", function()
	vim.api.nvim_create_autocmd("BufEnter", {
		once = true,
		callback = function()
			vim.keymap.set({ "n", "x" }, "d", "<Plug>(bufmanager-bdelete)", { buffer = true })
			vim.keymap.set("n", "dd", "<Plug>(bufmanager-bdelete)_", { buffer = true })
		end,
	})
	vim.fn["bufmanager#open"]()
end)
'''

[[plugins]]
repo = "gw31415/deepl.vim"
lua_source = '''
	local function setup_authkey(path)
		path = vim.fn.expand(path, nil, nil)
		local key
		if vim.fn.filereadable(path) == 1 then
			key = vim.fn.trim(vim.fn.readfile(path, nil, 1)[1])
		else
			key = vim.fn.input('`g:deepl_authkey`: ')
			if key == '' then
				return false
			end
			vim.fn.writefile({ key }, path)
			vim.fn.system({ 'chmod', '600', path })
			vim.notify(vim.fn.printf(
					'Successfully saved g:deepl_authkey at `%s`.', path),
				vim.log.levels.INFO, {
					title = 'DeepL.vim'
				})
		end
		vim.api.nvim_set_var('deepl_authkey', key)
		return true
	end
	setup_authkey '~/.ssh/deepl_authkey.txt'
'''
[[plugins]]
repo = "gw31415/deepl-commands.nvim"
on_event = "CmdlineEnter"
depends = ["deepl.vim", "fzyselect.vim"]
lua_source = '''
	require "deepl-commands".setup {
		selector_func = require "fzyselect".start,
	}
'''
[[plugins]]
repo = "gw31415/deepl-operator.vim"
depends = ["deepl.vim"]
on_map = { nx = "cl" }
lua_source = '''
	vim.keymap.set({ "n", "x" }, "cl", "<Plug>(deepl-replace)")
	vim.keymap.set("n", "cll", "<Plug>(deepl-replace)_")
'''

[[plugins]]
repo = "gw31415/gpt.nvim"
on_map = { nx = "<C-g>r", ni = "<C-g>p", n = "<C-g>o" }
lua_source = '''
	vim.keymap.set({ "n", "x" }, "<C-g>r", '<Plug>(gpt-replace)')
	vim.keymap.set({ "n", "i" }, "<C-g>p", function() require 'gpt'.prompt() end)
	vim.keymap.set("n", "<C-g>o", function()
		require 'gpt'.order {
			opener = "10split",
			-- opener = "call nvim_open_win(bufnr('%'), v:true, { 'external': v:true, 'width': 50, 'height': 20 })",
			setup_window = function()
				---@diagnostic disable-next-line: redundant-parameter
				vim.api.nvim_win_set_option(0, "stl", "order-result")
			end
		}
	end)
	local function setup_authkey(path, opts)
		---@diagnostic disable: param-type-mismatch
		opts = opts or {}
		path = vim.fn.expand(path, nil, nil)
		local key
		if vim.fn.filereadable(path) == 1 then
			key = vim.fn.trim(vim.fn.readfile(path, nil, 1)[1])
		else
			key = vim.fn.input(opts.prompt or 'Input api key: ')
			if key == '' then return nil end
			vim.fn.writefile({ key }, path)
			vim.fn.system({ 'chmod', '600', path })
			vim.notify(string.format(
					'Successfully saved OPENAI_API_KEY at `%s`.', path),
				vim.log.levels.INFO, {
					title = 'gpt.nvim'
				})
		end
		return key
	end

	require 'gpt'.setup {
		api_key = function() return setup_authkey('~/.ssh/openai_api_key.txt', { prompt = 'OPENAI_API_KEY = ' }) end,
		model = "gpt-4-1106-preview",
	}
'''

[[plugins]]
repo = "numToStr/Comment.nvim"
on_map = { nx = "gc" }
lua_source = '''
	require 'Comment'.setup {
		toggler = {
			block = 'gCC',
		},
		opleader = {
			block = 'gC',
		},
	}
'''

[[plugins]]
repo = "stevearc/overseer.nvim"
on_event = "VimEnter"
lua_source = "require 'overseer'.setup()"

[[plugins]]
repo = "CRAG666/code_runner.nvim"
on_event = "CmdlineEnter"
depends = "plenary.nvim"
lua_source = '''
	require 'code_runner'.setup {
		mode = "term",
		focus = true,
		startinsert = false,
		filetype = {
			java = "cd $dir && javac $fileName && java $fileNameWithoutExt",
			python = "python3 -u",
			typescript = "deno run",
			rust = "cd $dir && rustc $fileName && $dir/$fileNameWithoutExt",
			go = "go run",
		},
		term = {
			position = "rightb vert",
			size = 70,
		},
		-- filetype_path = vim.fn.expand('~/.config/nvim/code_runner.json'),
		-- project_path = vim.fn.expand('~/.config/nvim/project_manager.json')
	}
'''

[[plugins]]
repo = "monaqa/dial.nvim"
on_map = { nx = ["<C-a>", "<C-x>", "g<C-a>", "g<C-x>"] }
lua_source = '''
	vim.keymap.set({ "n", "x" }, "<C-a>", "<Plug>(dial-increment)")
	vim.keymap.set({ "n", "x" }, "<C-x>", "<Plug>(dial-decrement)")
	vim.keymap.set("x", "g<C-a>", function() require 'dial.map'.manipulate("increment", "gvisual") end)
	vim.keymap.set("x", "g<C-x>", function() require 'dial.map'.manipulate("decrement", "gvisual") end)
	vim.keymap.set("n", "g<C-a>", function() require("dial.map").manipulate("increment", "gnormal") end)
	vim.keymap.set("n", "g<C-x>", function() require("dial.map").manipulate("decrement", "gnormal") end)

	local augend = require "dial.augend"
	require "dial.config".augends:register_group {
		default = {
			augend.integer.alias.decimal,
			augend.semver.alias.semver,
			augend.integer.alias.hex,
			augend.constant.alias.bool,
			augend.date.alias["%Y/%m/%d"],
			augend.date.alias["%Y-%m-%d"],
		},
	}
'''

[[plugins]]
repo = "gw31415/dein-ui.vim"
on_cmd = "DeinUpdate"

[[plugins]]
repo = "lewis6991/gitsigns.nvim"
on_event = "CursorHold"
lua_source = '''
	require 'gitsigns'.setup {
		numhl = true,
		signcolumn = false,
	}
'''

[[plugins]]
repo = "Darazaki/indent-o-matic"
on_event = "BufRead"
lua_source = "require 'indent-o-matic'.setup{}"

# Discord Rich Presence
[[plugins]]
repo = "andweeb/presence.nvim"
on_event = "CursorHold"
lua_source = "require 'presence'.setup()"

[[plugins]]
repo = "9seconds/repolink.nvim"
on_cmd = "RepoLink"
lua_source = "require 'repolink'.setup()"

# [[plugins]]
# repo = "tversteeg/registers.nvim"
# on_map = { nv = '"', i = "<C-R>" }
# on_cmd = "Registers"
# lua_source = "require 'registers'.setup()"

# [[plugins]]
# repo = "boltlessengineer/smart-tab.nvim"
# on_event = "InsertEnter"
# lua_source = "require 'smart-tab'.setup()"

[[plugins]]
repo = "Wansmer/symbol-usage.nvim"
on_event = "BufReadPre"
lua_source = '''
local function h(name) return vim.api.nvim_get_hl(0, { name = name }) end

-- hl-groups can have any name
vim.api.nvim_set_hl(0, 'SymbolUsageRounding', { fg = h('CursorLine').bg, italic = true })
vim.api.nvim_set_hl(0, 'SymbolUsageContent', { bg = h('CursorLine').bg, fg = h('Comment').fg, italic = true })
vim.api.nvim_set_hl(0, 'SymbolUsageRef', { fg = h('Function').fg, bg = h('CursorLine').bg, italic = true })
vim.api.nvim_set_hl(0, 'SymbolUsageDef', { fg = h('Type').fg, bg = h('CursorLine').bg, italic = true })
vim.api.nvim_set_hl(0, 'SymbolUsageImpl', { fg = h('@keyword').fg, bg = h('CursorLine').bg, italic = true })

local function text_format(symbol)
	local res = {}

	if symbol.references then
		local usage = symbol.references <= 1 and 'usage' or 'usages'
		local num = symbol.references == 0 and 'no' or symbol.references
		table.insert(res, { '󰌹 ', 'SymbolUsageRef' })
		table.insert(res, { ('%s %s'):format(num, usage), 'SymbolUsageContent' })
	end

	-- if symbol.definition then
	-- 	if #res > 0 then
	-- 		table.insert(res, { ' ', 'NonText' })
	-- 	end
	-- 	table.insert(res, { '󰳽 ', 'SymbolUsageDef' })
	-- 	table.insert(res, { symbol.definition .. ' defs', 'SymbolUsageContent' })
	-- end

	if symbol.implementation then
		if #res > 0 then
			table.insert(res, { ' ', 'NonText' })
		end
		table.insert(res, { '󰡱 ', 'SymbolUsageImpl' })
		table.insert(res, { symbol.implementation .. ' impls', 'SymbolUsageContent' })
	end

	return res
end

require 'symbol-usage'.setup {
	text_format = text_format,
	vt_position = 'end_of_line',
	implementation = { enabled = true },
}
'''
