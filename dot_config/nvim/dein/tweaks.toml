[[plugins]]
repo = "Shougo/dein.vim"
on_event = "CmdlineEnter"

[[plugins]]
repo = "hrsh7th/nvim-insx"
on_event = "InsertEnter"
lua_source = "require 'insx.preset.standard'.setup()"

[[plugins]]
repo = "delphinus/cellwidths.nvim"
on_event = "UIEnter"
lua_source = "require 'cellwidths'.setup { name = 'cica' }"

[[plugins]]
repo = "kylechui/nvim-surround"
rev = "v1.0.0"
on_event = "CursorHold"
lua_source = "require 'nvim-surround'.setup()"

[[plugins]]
repo = "glts/vim-textobj-comment"
on_map = { ox = ["ic", "ac"] }
depends = "vim-textobj-user"

[[plugins]]
repo = "gbprod/substitute.nvim"
on_lua = "substitute"
lua_add = '''
	vim.keymap.set("n", "_",  function() require 'substitute'.operator() end)
	vim.keymap.set("x", "_",  function() require 'substitute'.visual()   end)
	vim.keymap.set("n", "__", function() require 'substitute'.line()     end)
'''
lua_source = "require 'substitute'.setup()"

[[plugins]]
repo = "mbbill/undotree"
on_cmd = ["UndotreeShow", "UndotreeHide", "UndotreeFocus", "UndotreeToggle"]

[[plugins]]
repo = "simeji/winresizer"
on_map = "<c-w>"
lua_source = 'vim.api.nvim_set_var("winresizer_start_key", "<C-W>e")'

[[plugins]]
repo = "thinca/vim-ambicmd"
on_event = "CmdlineEnter"
lua_source = '''
vim.keymap.set("c", "<Space>", function()
	return vim.fn["ambicmd#expand"]("<Space>")
end, { expr = true })
'''

[[plugins]]
repo = "gw31415/fzyselect.vim"
on_event = "CursorHold"
lua_source = '''
	vim.api.nvim_create_autocmd("FileType", {
		pattern = "fzyselect",
		callback = function()
			vim.keymap.set("n", "i", "<Plug>(fzyselect-fzy)", { buffer = true })
			vim.keymap.set("n", "<cr>", "<Plug>(fzyselect-retu)", { buffer = true })
			vim.keymap.set("n", "<esc>", "<cmd>clo<cr>", { buffer = true })
		end,
	})
	-- fuzzy search
	vim.keymap.set('n', "gl", function()
		local winid = vim.api.nvim_get_current_win()
		require 'fzyselect'.start(vim.api.nvim_buf_get_lines(0, 0, -1, true),
			{ prompt = "fuzzy search: <Enter> to jump" },
			function(_, i)
				if i then
					vim.api.nvim_win_set_cursor(winid, { i, 0 })
				end
			end)
	end)
	-- git ls-files
	vim.keymap.set("n", "<c-p>", function()
		---@diagnostic disable-next-line: undefined-field
		local res = vim.system({ 'git', 'ls-files' }, { text = true }):wait()
		if res.code ~= 0 then
			vim.notify(vim.fn.trim(res.stderr), vim.log.levels.ERROR, { title = "fzyselect: git ls-files" })
		else
			require 'fzyselect'.start(vim.fn.split(res.stdout, '\n'),
				{ prompt = 'git ls-files: <Enter> to edit' },
				function(path)
					if path then vim.cmd.edit(path) end
				end)
		end
	end)
	-- buffer manager
	local last_access = {}
	vim.api.nvim_create_autocmd('BufEnter', {
		callback = function() last_access[vim.api.nvim_get_current_buf()] = vim.fn.localtime() end,
	})
	vim.api.nvim_create_autocmd('BufDelete', {
		callback = function() last_access[vim.api.nvim_get_current_buf()] = nil end,
	})
	vim.keymap.set("n", "gb", function()
		local current_win = vim.api.nvim_get_current_win()
		local current_buf = vim.api.nvim_get_current_buf()
		local bufs
		local function retain_bufs()
			bufs = {}
			for _, buf in ipairs(vim.api.nvim_list_bufs()) do
				if vim.api.nvim_buf_is_loaded(buf)
					and vim.fn.buflisted(buf)
					and vim.api.nvim_buf_get_name(buf) ~= ""
					and buf ~= current_buf then
					table.insert(bufs, buf)
				end
			end
			table.sort(bufs, function(a, b)
				return (last_access[a] or 0) > (last_access[b] or 0)
			end)
		end
		retain_bufs()
		vim.api.nvim_create_autocmd('FileType', {
			once = true,
			pattern = 'fzyselect',
			callback = function()
				vim.keymap.set('n', 'dd', function()
					local buf = vim.fn["fzyselect#getitem"]('.')[1]
					local bufname = vim.api.nvim_buf_get_name(buf)
					vim.api.nvim_buf_delete(buf, {})
					retain_bufs()
					vim.fn["fzyselect#refresh"](bufs)
					if #bufs == 0 then
						vim.cmd "close"
					end
					vim.notify('deleted buffer: ' .. bufname, vim.log.levels.INFO, {
						title = "fzyselect: buffer manager"
					})
				end, { buffer = true })
			end
		})
		require 'fzyselect'.start(bufs, {
			format_item = vim.api.nvim_buf_get_name,
			prompt = 'buffer manager: <Enter> to switch or dd to delete'
		}, function(buf)
			if buf then vim.api.nvim_win_set_buf(current_win, buf) end
		end)
	end)
'''
lua_post_source = "vim.ui.select = require 'fzyselect'.start"
[[plugins]]
repo = "gw31415/bufmanager.nvim"
depends = "fzyselect.vim"

[[plugins]]
repo = "gw31415/deepl.vim"
lua_source = '''
	local function setup_authkey(path)
		path = vim.fn.expand(path, nil, nil)
		local key
		if vim.fn.filereadable(path) == 1 then
			key = vim.fn.trim(vim.fn.readfile(path, nil, 1)[1])
		else
			key = vim.fn.input('`g:deepl_authkey`: ')
			if key == '' then
				return false
			end
			vim.fn.writefile({ key }, path)
			vim.fn.system({ 'chmod', '600', path })
			vim.notify(vim.fn.printf(
					'Successfully saved g:deepl_authkey at `%s`.', path),
				vim.log.levels.INFO, {
					title = 'DeepL.vim'
				})
		end
		vim.api.nvim_set_var('deepl_authkey', key)
		return true
	end
	setup_authkey '~/.ssh/deepl_authkey.txt'
'''
[[plugins]]
repo = "gw31415/deepl-commands.nvim"
on_event = "CmdlineEnter"
depends = ["deepl.vim", "fzyselect.vim"]
lua_source = '''
	require "deepl-commands".setup {
		selector_func = require "fzyselect".start,
	}
'''
[[plugins]]
repo = "gw31415/deepl-operator.vim"
depends = ["deepl.vim"]
on_map = { nx = "cl" }
lua_source = '''
	vim.keymap.set({ "n", "x" }, "cl", "<Plug>(deepl-replace)")
	vim.keymap.set("n", "cll", "<Plug>(deepl-replace)_")
'''

[[plugins]]
repo = "gw31415/gpt.nvim"
on_map = { nx = "<C-g>r", ni = "<C-g>p", n = "<C-g>o" }
lua_source = '''
	vim.keymap.set({ "n", "x" }, "<C-g>r", '<Plug>(gpt-replace)')
	vim.keymap.set({ "n", "i" }, "<C-g>p", function() require 'gpt'.prompt() end)
	vim.keymap.set("n", "<C-g>o", function()
		require 'gpt'.order {
			opener = "10split",
			-- opener = "call nvim_open_win(bufnr('%'), v:true, { 'external': v:true, 'width': 50, 'height': 20 })",
			setup_window = function()
				---@diagnostic disable-next-line: redundant-parameter
				vim.api.nvim_win_set_option(0, "stl", "order-result")
			end
		}
	end)
	local function setup_authkey(path, opts)
		---@diagnostic disable: param-type-mismatch
		opts = opts or {}
		path = vim.fn.expand(path, nil, nil)
		local key
		if vim.fn.filereadable(path) == 1 then
			key = vim.fn.trim(vim.fn.readfile(path, nil, 1)[1])
		else
			key = vim.fn.input(opts.prompt or 'Input api key: ')
			if key == '' then return nil end
			vim.fn.writefile({ key }, path)
			vim.fn.system({ 'chmod', '600', path })
			vim.notify(string.format(
					'Successfully saved OPENAI_API_KEY at `%s`.', path),
				vim.log.levels.INFO, {
					title = 'gpt.nvim'
				})
		end
		return key
	end

	require 'gpt'.setup {
		api_key = function() return setup_authkey('~/.ssh/openai_api_key.txt', { prompt = 'OPENAI_API_KEY = ' }) end,
	}
'''

[[plugins]]
repo = "numToStr/Comment.nvim"
on_map = { nx = "gc" }
lua_source = '''
	require 'Comment'.setup {
		toggler = {
			block = 'gCC',
		},
		opleader = {
			block = 'gC',
		},
	}
'''

[[plugins]]
repo = "stevearc/overseer.nvim"
on_event = "VimEnter"
lua_source = "require 'overseer'.setup()"

[[plugins]]
repo = "CRAG666/code_runner.nvim"
on_event = "CmdlineEnter"
depends = "plenary.nvim"
lua_source = '''
	require 'code_runner'.setup {
		mode = "term",
		focus = true,
		startinsert = true,
		filetype = {
			java = "cd $dir && javac $fileName && java $fileNameWithoutExt",
			python = "python3 -u",
			typescript = "deno run",
			rust = "cd $dir && rustc $fileName && $dir/$fileNameWithoutExt",
			go = "go run",
		},
		term = {
			position = "bot",
			size = 8,
		},
		-- filetype_path = vim.fn.expand('~/.config/nvim/code_runner.json'),
		-- project_path = vim.fn.expand('~/.config/nvim/project_manager.json')
	}
'''

[[plugins]]
repo = "monaqa/dial.nvim"
on_map = { nx = ["<C-a>", "<C-x>", "g<C-a>", "g<C-x>"] }
lua_source = '''
	vim.keymap.set({ "n", "x" }, "<C-a>", "<Plug>(dial-increment)")
	vim.keymap.set({ "n", "x" }, "<C-x>", "<Plug>(dial-decrement)")
	vim.keymap.set("x", "g<C-a>", function() require 'dial.map'.manipulate("increment", "gvisual") end)
	vim.keymap.set("x", "g<C-x>", function() require 'dial.map'.manipulate("decrement", "gvisual") end)
	vim.keymap.set("n", "g<C-a>", function() require("dial.map").manipulate("increment", "gnormal") end)
	vim.keymap.set("n", "g<C-x>", function() require("dial.map").manipulate("decrement", "gnormal") end)

	local augend = require "dial.augend"
	require "dial.config".augends:register_group {
		default = {
			augend.integer.alias.decimal,
			augend.semver.alias.semver,
			augend.integer.alias.hex,
			augend.constant.alias.bool,
			augend.date.alias["%Y/%m/%d"],
			augend.date.alias["%Y-%m-%d"],
		},
	}
'''

[[plugins]]
repo = "wsdjeg/dein-ui.vim"
on_cmd = "DeinUpdate"
frozen = true

[[plugins]]
repo = "lewis6991/gitsigns.nvim"
on_event = "CursorHold"
lua_source = '''
	require 'gitsigns'.setup {
		numhl = true,
		signcolumn = false,
	}
'''

[[plugins]]
repo = "Darazaki/indent-o-matic"
on_event = "BufEnter"
lua_source = "require 'indent-o-matic'.setup{}"

# Discord Rich Presence
[[plugins]]
repo = "andweeb/presence.nvim"
on_event = "CursorHold"
lua_source = "require 'presence'.setup()"
