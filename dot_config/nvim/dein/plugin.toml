[[plugins]]
repo = "navarasu/onedark.nvim"

[[plugins]]
repo = "vim-denops/denops.vim"
# hook_add = "let g:denops#debug = 1"

[[plugins]]
repo = "lambdalisue/gin.vim"

[[plugins]]
repo = "lambdalisue/kensaku.vim"

[[plugins]]
repo = "gw31415/mstdn.vim"
lua_add = '''
vim.api.nvim_create_autocmd("BufReadCmd", {
	pattern = "mstdn://*",
	callback = function()
		vim.cmd "setl nonu so=0"
		vim.keymap.set('n', "G", function()
			if vim.fn.getcurpos()[2] == vim.fn.line('$') then
				-- 最下部で `G` するとさらに取得
				vim.fn["mstdn#timeline#load_more"]()
			end
			vim.cmd "norm! G"
		end, { buffer = true })
		vim.keymap.set('n', "<Enter>", function()
			-- アイテム選択だが、今のところload_moreくらいしかない
			vim.fn["mstdn#timeline#load_more"]()
		end, { buffer = true })
		vim.keymap.set('n', ">>", function() vim.fn["mstdn#timeline#favourite"]() end, { buffer = true })
		vim.keymap.set('n', "<<", function() vim.fn["mstdn#timeline#unfavourite"]() end, { buffer = true })
		vim.keymap.set('n', "i", "<Plug>(mstdn-open-editor)", { buffer = true })
	end
})

vim.api.nvim_create_autocmd("BufReadCmd", {
	pattern = "mstdn://*",
	once = true,
	callback = function()
		vim.fn.timer_start("1500", function()
			vim.fn["mstdn#timeline#reconnect_all"]()
		end, { ["repeat"] = -1 })
	end
})
'''

[[plugins]]
repo = "gw31415/mstdn-editor.vim"

# [[plugins]]
# repo = "skanehira/denops-gh.vim"

[[plugins]]
repo = "yuki-yano/fuzzy-motion.vim"
depends = "kensaku.vim"
lua_add = '''
	vim.keymap.set("n", "<Space>", "<cmd>FuzzyMotion<cr>")
	vim.g.fuzzy_motion_labels = {
		'U', 'H', 'E', 'T', 'O', 'N', 'A', 'S', 'P', 'G', 'I', 'D', 'K', 'B', 'J', 'M',
	}
	vim.g.fuzzy_motion_matchers = { 'fzf', 'kensaku' }
'''

[[plugins]]
repo = "gw31415/skkeletal.vim"

[[plugins]]
repo = "vim-skk/skkeleton"
depends = "skkeletal.vim"
rev = "cf83df9e6044fef71df359a0aca89ae85d60dd5b"
lua_add = '''
	vim.keymap.set({ "i", "c", "t" }, "<C-j>", "<Plug>(skkeleton-enable)")
	vim.api.nvim_create_autocmd("User", { pattern = "skkeleton-mode-changed", command = "redraws" })
	_G.get_skkeleton_modestring = function()
		local mode = vim.fn["skkeleton#mode"]()
		if mode == "hira" then
			return "󱌴"
		elseif mode == "kata" then
			return "󱌵"
		elseif mode == "hankata" then
			return "󱌶"
		elseif mode == "zenkaku" then
			return "󱌭"
		elseif mode == "abbrev" then
			return "󰥤"
		else -- if mode == ''
			return "󱌯"
		end
	end
	vim.fn["skkeletal#config"]({
		eggLikeNewline = true,
		globalJisyo = "~/.skk/SKK-JISYO.L",
		markerHenkan = "▹",
		markerHenkanSelect = "▸",
		dvorak = true,
	})

	for _, map in pairs({
		{ "input",  "<c-e>", "" },
		{ "henkan", "<c-e>", "" },
		{ "input",  "<c-n>", "henkanFirst" },
		{ "henkan", "<c-n>", "henkanForward" },
		{ "henkan", "<c-p>", "henkanBackward" },
		{ "henkan", "<bs>",  "henkanBackward" },
		{ "henkan", "<c-h>", "" },
		{ "henkan", "<c-h>", "henkanBackward" },
	}) do
		vim.fn["skkeleton#register_keymap"](map[1], map[2], map[3])
	end
'''

[[plugins]]
repo = "lambdalisue/fern-hijack.vim"
