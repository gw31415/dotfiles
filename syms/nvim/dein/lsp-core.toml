[[plugins]]
repo = "folke/lazydev.nvim"
on_ft = "lua"
depends = ["nvim-lspconfig", "mason.nvim"]
lua_source = '''
	require "lazydev".setup {}
'''

[[plugins]]
repo = "neovim/nvim-lspconfig"
lua_source = '''
	local lspconfig = require 'lspconfig'
	local configs = require 'lspconfig.configs'

	-- if not configs.protobuf_language_server then
	--   configs.protobuf_language_server = {
	-- 	default_config = {
	--  		cmd = { 'protobuf-language-server' },
	--  		filetypes = { 'proto' },
	--  		single_file_support = true,
	--  		root_dir = lspconfig.util.root_pattern('.git', '.gitignore', 'build.bazel', 'WORKSPACE'),
	-- 	},
	--   }
	-- end
	-- if vim.fn.executable "protobuf-language-server" == 1 then
	-- 	lspconfig.protobuf_language_server.setup { autostart = true }
	-- end

	if vim.fn.executable "tectonic" == 1 then
		lspconfig.texlab.setup {
			autostart = true,
			settings = {
				texlab = {
					build = {
						executable = 'tectonic',
						args = {
							"-X",
							"compile",
							"%f",
							"--synctex",
							"--keep-logs",
							"--keep-intermediates",
						},
					},
				},
			},
		}
	end

	if vim.fn.executable "protols" == 1 then
		lspconfig.protols.setup {
			autostart = true,
			on_attach = function(client, bufnr)
				client.server_capabilities.documentFormattingProvider = false
			end,
		}
	end

	lspconfig.tsp_server.setup { autostart = true }

	if vim.fn.executable "satysfi-language-server" == 1 then
		lspconfig['satysfi-ls'].setup { autostart = true }
	end

	if vim.fn.executable "sourcekit-lsp" == 1 then
		require('lspconfig')['sourcekit'].setup { autostart = true }
	end

	if vim.fn.executable "erg" == 1 then
		lspconfig['erg'].setup { autostart = true }
	end

	if vim.fn.executable "gopls" == 1 then
		lspconfig['gopls'].setup { autostart = true }
	end

	if vim.fn.executable "ruff" then
		lspconfig['ruff'].setup { autostart = true }
	end

	if vim.fn.executable "markdown-oxide" then
		lspconfig.markdown_oxide.setup({
			-- capabilities = capabilities -- ensure that capabilities.workspace.didChangeWatchedFiles.dynamicRegistration = true
			root_dir = lspconfig.util.root_pattern('.git', vim.fn.getcwd()), -- this is a temp fix for an error in the lspconfig for this LS
		})
	end
'''

[[plugins]]
repo = "williamboman/mason.nvim"
lua_source = "require 'mason'.setup()"

[[plugins]]
repo = "nvimtools/none-ls.nvim"
depends = "plenary.nvim"
lua_source = "require 'null-ls'.setup()"

[[plugins]]
repo = "williamboman/mason-lspconfig.nvim"
depends = ["mason.nvim", "nvim-lspconfig", "nvim-cmp", "nvim-navic"]
on_event = "CursorHold"
lua_source = '''
	local default_caps = {
		workspace = {
			didChangeWatchedFiles = {
				dynamicRegistration = true,
			},
		},
		textDocument = {
			foldingRange = {
				dynamicRegistration = false,
				lineFoldingOnly = true
			},
		}
	}

	local capabilities = vim.tbl_deep_extend("keep", default_caps, require("cmp_nvim_lsp").default_capabilities())

	local navic = require("nvim-navic")

	local mason_lspconfig = require "mason-lspconfig"
	local on_attach = function(client, bufnr)
		vim.api.nvim_buf_set_option(bufnr, "formatexpr",
			"v:lua.vim.lsp.formatexpr(#{timeout_ms:250})")
		navic.attach(client, bufnr)
		-- _G.lsp_onattach_func(i, bufnr)
	end
	mason_lspconfig.setup_handlers {
		function(server_name)
			local opts = {
				on_attach = on_attach,
				capabilities = capabilities,
				settings = {
					["rust-analyzer"] = {
						checkOnSave = {
							command = "clippy",
						},
					},
					pylsp = {
						plugins = {
							autopep8 = {
								enabled = false,
							},
							yapf = {
								enabled = false,
							},
						},
					},
					omniSharp = {
						useGlobalMono = "always"
					}
				},
			}

			local deno_root_dir = require 'lspconfig'.util.root_pattern "deno.*"
			local is_deno_repo = deno_root_dir(vim.api.nvim_buf_get_name(0)) ~= nil

			if server_name == "denols" then
				if not is_deno_repo then return end
				opts["root_dir"] = deno_root_dir
				opts["single_file_support"] = false
			elseif server_name == "tsserver" then
				if is_deno_repo then return end
			end

			require "lspconfig"[server_name].setup(opts)
		end,
	}
'''

[[plugins]]
repo = "jay-babu/mason-null-ls.nvim"
depends = ["mason.nvim", "none-ls.nvim"]
on_event = "CursorHold"
lua_source = '''
	require 'mason-null-ls'.setup {
		automatic_setup = true,
		handlers = {},
	}
'''
