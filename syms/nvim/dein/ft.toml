[[plugins]]
repo = "akinsho/org-bullets.nvim"
lua_source = '''
	require 'org-bullets'.setup {
		symbols = {
			headlines = {
				'◉', '◊', '▹',
				'◉', '◊', '▹',
				'◉', '◊', '▹',
				'◉', '◊', '▹',
			}
		},
	}
'''
[[plugins]]
repo = "danilshvalov/org-modern.nvim"
[[plugins]]
repo = "nvim-orgmode/orgmode"
on_ft = "org"
# on_event = "CursorHold"
depends = [
	"org-bullets.nvim",
	"vim-repeat",
	"org-modern.nvim",
	"nvim-treesitter",
]
lua_add = '''
	vim.api.nvim_create_autocmd('BufEnter', {
		pattern = '*.org',
		callback = function()
			vim.opt_local.formatoptions:append 'mM'
			vim.opt_local.foldlevel = 0
			vim.opt_local.expandtab = true
			vim.opt_local.tabstop = 2
			vim.opt_local.shiftwidth = 2
			vim.keymap.set({ 'n', 'i' }, '<M-v>', function()
				local filename = vim.fn.strftime '%Y%m%d%H%M%S' .. '.png'
				local res = vim.system({ 'pngpaste', filename }, {
					text = true,
					cwd = vim.fn.expand '%:p:h',
				}):wait()
				if res.signal ~= 0 then
					vim.notify(res.stderr, vim.log.levels.ERROR)
				else
					vim.notify('pngpaste: ' .. filename, vim.log.levels.INFO)
					vim.api.nvim_feedkeys(
						vim.api.nvim_replace_termcodes(
							'<Esc>a[[file:' .. filename .. ']]<Esc>%O#+CAPTION:<Space>',
							true,
							true,
							true
						) or '',
						'',
						true
					)
				end
			end, { buffer = true })
		end
	})
'''
lua_source = '''
	local Menu = require 'org-modern.menu'
	vim.keymap.set('n', '<Leader>o', '<Nop>', {})
	require 'orgmode'.setup_ts_grammar()
	require 'orgmode'.setup {
		ui = {
			menu = {
				handler = function(data)
					Menu:new {
						window = {
							margin = { 1, 0, 1, 0 },
							padding = { 0, 1, 0, 1 },
							title_pos = 'center',
							border = 'single',
							zindex = 1000,
						},
						icons = {
							separator = '➜',
						},
					}:open(data)
				end,
			},
		},
		org_agenda_files = { '~/iCloud_Drive/org/*' },
		org_agenda_skip_deadline_if_done = true,
		org_default_notes_file = '~/iCloud_Drive/org/refile.org',
		org_capture_templates = {
			n = {
				description = 'Default Note',
				template = '* %?\n %U',
			},
			t = {
				description = 'Task',
				template = '* TODO %?\n  %u',
				target = '~/iCloud_Drive/org/tasks.org',
			},
		},
	}
'''

[[plugins]]
repo = "iamcco/markdown-preview.nvim"
on_ft = ["markdown", "pandoc.markdown", "rmd"]
build = 'sh -c "cd app && npm install"'

[[plugins]]
repo = "akinsho/flutter-tools.nvim"
on_ft = "dart"
depends = ["plenary.nvim"]
lua_source = '''
require 'flutter-tools'.setup {
	flutter_lookup_cmd = 'mise where flutter',
	lsp = {
		color = {
			enabled = true,
			virtual_text = true,
		}
	},
}
'''

[[plugins]]
repo = "mrcjkb/rustaceanvim"
on_ft = "rust"

[[plugins]]
repo = "tranvansang/octave.vim"
on_ft = ["matlab", "octave"]

[[plugins]]
repo = "mattn/emmet-vim"
on_ft = ["html", "jsx", "tsx", "astro"]

[[plugins]]
repo = "saecki/crates.nvim"
rev = "stable"
depends = "plenary.nvim"
on_ft = "toml"
lua_source = "require 'crates'.setup()"

[[plugins]]
repo = "rest-nvim/rest.nvim"
on_ft = "http"
depends = "plenary.nvim"
hook_add = '''
autocmd BufEnter *.http call s:set_rest_keymap()
function! s:set_rest_keymap()
	setl ft=http
	nn <buffer> <C-m> <Plug>RestNvim
endfunction
'''
lua_source = '''
require 'rest-nvim'.setup {
	result_split_horizontal = false,
}
'''

[[plugins]]
repo = "ixru/nvim-markdown"
on_ft = "markdown"
hook_source = '''
function! s:MapNotHasMapTo(lhs, rhs, modes)
	for mode in split(a:modes, '\zs')
		if !hasmapto('<Plug>' . a:rhs, mode)
			execute mode . 'map <buffer> ' . a:lhs . ' <Plug>' . a:rhs
		endif
	endfor
endfunction
let g:vim_markdown_no_default_key_mappings = 1

function! s:SetKeyMaps()
	call <sid>MapNotHasMapTo(']]', 'Markdown_MoveToNextHeader', 'nv')
	call <sid>MapNotHasMapTo('[[', 'Markdown_MoveToPreviousHeader', 'nv')
	call <sid>MapNotHasMapTo('][', 'Markdown_MoveToNextSiblingHeader', 'nv')
	call <sid>MapNotHasMapTo('[]', 'Markdown_MoveToPreviousSiblingHeader', 'nv')
	call <sid>MapNotHasMapTo(']u', 'Markdown_MoveToParentHeader', 'nv')
	call <sid>MapNotHasMapTo(']c', 'Markdown_MoveToCurHeader', 'nv')
	call <sid>MapNotHasMapTo('<C-c>', 'Markdown_Checkbox', 'n')
	call <sid>MapNotHasMapTo('<TAB>', 'Markdown_Fold', 'n')
	call <sid>MapNotHasMapTo('<TAB>', 'Markdown_Jump', 'i')
	call <sid>MapNotHasMapTo('<C-k>', 'Markdown_CreateLink', 'vi')
	call <sid>MapNotHasMapTo('gx', 'Markdown_FollowLink', 'n')
	call <sid>MapNotHasMapTo('o', 'Markdown_NewLineBelow', 'n')
	call <sid>MapNotHasMapTo('O', 'Markdown_NewLineAbove', 'n')
	call <sid>MapNotHasMapTo('<CR>', 'Markdown_NewLineBelow', 'i')
endfunction
autocmd FileType markdown call <sid>SetKeyMaps()
'''

[ftplugin]
erg = "setl et"
python = '''
let s:venv = finddir('.venv/..', expand('%:p:h').';')
if s:venv != ''
	let s:venv = s:venv . '/.venv/bin/python'
	" exe $"autocmd InsertEnter <buffer> ++once PyrightSetPythonPath {s:venv}/.venv/bin/python"
endif
'''
typst = '''
setl commentstring=//\ %s
setl shiftwidth=2
setl tabstop=2
setl expandtab
'''
