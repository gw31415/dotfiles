[[plugins]]
repo = "gw31415/dpp-automkstate.nvim"
on_event = "BufWritePre"
lua_source = '''
require 'dpp-automkstate'.setup('~/.cache/dpp/', '~/.config/nvim/dpp.ts')
require 'dpp-automkstate'.watch(vim.fn.stdpath 'config')
'''

[[plugins]]
repo = "gw31415/extend_word_motion.nvim"
depends = "tinysegmenter.nvim"
on_map = ["w", "b", "e", "ge"]
lua_source = "require 'extend_word_motion'.setup{}"

[[plugins]]
repo = "hrsh7th/nvim-insx"
on_event = "InsertEnter"
lua_source = "require 'insx.preset.standard'.setup()"

[[plugins]]
repo = "tani/dmacro.nvim"
on_event = "CursorHold"
hook_source = '''
inoremap <S-Right> <Plug>(dmacro-play-macro)
nnoremap <S-Right> <Plug>(dmacro-play-macro)
'''

[[plugins]]
repo = "cshuaimin/ssr.nvim"
on_lua = "ssr"
lua_add = '''
vim.keymap.set({ 'n', 'x' }, '<leader>/', function() require 'ssr'.open() end)
'''

[[plugins]]
repo = "gw31415/scrollUptoLastLine.vim"
on_map = { niv = '<MouseUp>' }
lua_source = "vim.keymap.set({'', 'i'}, '<S-MouseUp>', '<Nop>')"

[[plugins]]
repo = "gw31415/mkdir.vim"
on_event = "BufWritePre"

[[plugins]]
repo = "delphinus/cellwidths.nvim"
on_event = "UIEnter"
lua_source = '''
---@diagnostic disable: missing-return, missing-fields
require 'cellwidths'.setup { name = 'cica' }
vim.cmd [[ CellWidthsAdd 0xE0B6, 1 ]]
'''

[[plugins]]
repo = "kylechui/nvim-surround"
on_map = { n = [
	"ys",
	"yss",
	"yS",
	"ySS",
	"ds",
	"cs",
	"cS",
], i = [
	"<C-g>s",
	"<C-g>S",
], x = [
	"S",
	"gS",
] }
lua_source = """
local M = require 'nvim-surround'
require 'nvim-surround'.setup {
	surrounds = {
		["3"] = {
			add = { "'''", "'''" },
		},
	}
}
"""

[[plugins]]
repo = "glts/vim-textobj-comment"
on_map = { ox = ["ic", "ac"] }
depends = "vim-textobj-user"

[[plugins]]
repo = "kana/vim-textobj-entire"
on_map = { ox = ["ae", "ie"] }
depends = "vim-textobj-user"

[[plugins]]
repo = "osyo-manga/vim-operator-stay-cursor"
on_func = "operator#stay_cursor#wrapper"
depends = "vim-operator-user"
hook_add = "map <expr> gq operator#stay_cursor#wrapper('gq')"

[[plugins]]
repo = "gbprod/substitute.nvim"
on_lua = "substitute"
lua_add = '''
vim.keymap.set('n', '_', function() require 'substitute'.operator() end)
vim.keymap.set('x', '_', function() require 'substitute'.visual() end)
vim.keymap.set('n', '__', function() require 'substitute'.line() end)
'''
lua_source = "require 'substitute'.setup()"

[[plugins]]
repo = "jiaoshijie/undotree"
depends = "plenary.nvim"
on_map = { n = '<Leader>u' }
lua_source = '''
require 'undotree'.setup { keymaps = { ['<Esc>'] = 'quit' } }
vim.keymap.set('n', '<Leader>u', require 'undotree'.toggle)
'''

[[plugins]]
repo = "simeji/winresizer"
on_map = "<c-w>"
lua_source = 'vim.api.nvim_set_var("winresizer_start_key", "<C-W>e")'

[[plugins]]
repo = "thinca/vim-ambicmd"
on_event = "CmdlineEnter"
lua_source = '''
for _, value in pairs { '<space>', '!' } do
	vim.keymap.set('c', value, function()
		return vim.fn['ambicmd#expand'](value)
	end, { expr = true })
end
'''

[[plugins]]
repo = "gw31415/fzyselect-nui-opener.vim"
depends = "nui.nvim"

[[plugins]]
repo = "gw31415/fzyselect.vim"
depends = "fzyselect-nui-opener.vim"
on_event = "CursorHold"
lua_source = '''
vim.g.fzyselect_opener = require 'fzyselect-nui-opener'

vim.api.nvim_create_autocmd('FileType', {
	pattern = 'fzyselect',
	callback = function()
		vim.wo.winblend = 0
		vim.api.nvim_create_autocmd('TextChanged', {
			buffer = 0,
			once = true,
			callback = function()
				local lines = vim.api.nvim_buf_get_lines(0, 0, -1, true)
				local width = 0
				for _, line in ipairs(lines) do
					width = math.max(width, vim.fn.strdisplaywidth(line))
				end
				width = vim.fn.float2nr(math.max(width, vim.api.nvim_get_option_value('columns', {}) * 0.6))
				local row = math.max(math.floor(vim.api.nvim_get_option_value('lines', {}) / 2), 1)
				local col = math.max(math.floor((vim.api.nvim_get_option_value('columns', {}) - width) / 2), 1)
				vim.api.nvim_win_set_config(0, { width = width + 2, row = row, col = col, relative = 'editor' })
			end,
		})
		vim.keymap.set('n', 'i', require 'fzyselect'.input, { buffer = true })
		vim.keymap.set('n', '<cr>', require 'fzyselect'.cr, { buffer = true })
		vim.keymap.set('n', '<esc>', '<cmd>clo<cr>', { buffer = true })
		vim.opt_local.number = false
	end,
})
-- fuzzy search
vim.keymap.set('n', 'g/', function()
	local winid = vim.api.nvim_get_current_win()
	local tabstop = vim.api.nvim_get_option_value('tabstop', {})
	local shiftwidth = vim.api.nvim_get_option_value('shiftwidth', {})
	vim.api.nvim_create_autocmd('FileType', {
		callback = function()
			vim.api.nvim_set_option_value('tabstop', tabstop, {})
			vim.api.nvim_set_option_value('shiftwidth', shiftwidth, {})
		end,
		pattern = 'fzyselect',
		once = true,
	})
	require 'fzyselect'.start(vim.api.nvim_buf_get_lines(0, 0, -1, true),
		{ prompt = 'fuzzy search: <Enter> to jump' },
		function(_, i)
			if i then
				vim.api.nvim_win_set_cursor(winid, { i, 0 })
			end
		end)
end)
-- git ls-files
vim.keymap.set('n', '<c-p>', function()
	local res = vim.system({ 'git', 'ls-files' }, { text = true }):wait()
	if res.code ~= 0 then
		vim.notify(vim.fn.trim(res.stderr), vim.log.levels.ERROR, { title = 'fzyselect: git ls-files' })
	else
		require 'fzyselect'.start(vim.fn.split(res.stdout, '\n'),
			{ prompt = 'git ls-files: <Enter> to edit' },
			function(path)
				if path then vim.cmd.edit(path) end
			end)
	end
end)
'''
lua_post_source = '''
vim.ui.select = require 'fzyselect'.start
'''

[[plugins]]
repo = "gw31415/bufmanager.nvim"
depends = "fzyselect.vim"
on_event = "BufAdd"
lua_source = '''
vim.keymap.set('n', 'gb', function()
	vim.api.nvim_create_autocmd('FileType', {
		once = true,
		pattern = 'fzyselect',
		callback = function()
			vim.keymap.set({ 'n', 'x' }, 'd', '<Plug>(bufmanager-bdelete)', { buffer = true })
			vim.keymap.set('n', 'dd', '<Plug>(bufmanager-bdelete)_', { buffer = true })
		end,
	})
	vim.fn['bufmanager#open']()
end)
'''

[[plugins]]
repo = "gw31415/deepl.vim"
lua_source = '''
vim.api.nvim_set_var('deepl_authkey', os.getenv('DEEPL_API_KEY'))
'''
[[plugins]]
repo = "gw31415/deepl-commands.nvim"
on_event = "CmdlineEnter"
depends = ["deepl.vim", "fzyselect.vim"]
lua_source = '''
require 'deepl-commands'.setup {
	selector_func = require 'fzyselect'.start,
}
'''
[[plugins]]
repo = "gw31415/deepl-operator.vim"
depends = "deepl.vim"
on_map = { nx = "cl" }
lua_source = '''
vim.keymap.set({ 'n', 'x' }, 'cl', '<Plug>(deepl-replace)')
vim.keymap.set('n', 'cll', '<Plug>(deepl-replace)_')
'''

[[plugins]]
repo = "numToStr/Comment.nvim"
on_event = "CursorHold"
lua_source = '''
require 'Comment'.setup {
	toggler = {
		block = 'gCC',
	},
	opleader = {
		block = 'gC',
	},
}
'''

[[plugins]]
repo = "stevearc/overseer.nvim"
on_event = "CursorHold"
lua_source = "require 'overseer'.setup()"

[[plugins]]
repo = "CRAG666/code_runner.nvim"
on_event = "CmdlineEnter"
depends = "plenary.nvim"
lua_source = '''
require 'code_runner'.setup {
	mode = 'term',
	focus = true,
	startinsert = false,
	filetype = {
		java = 'cd $dir && javac $fileName && java $fileNameWithoutExt',
		python = 'python3 -u',
		typescript = 'deno run -A',
		rust = 'cd $dir && rustc $fileName && $dir/$fileNameWithoutExt',
		go = 'go run',
	},
	term = {
		position = 'rightb vert',
		size = 70,
	},
	-- filetype_path = vim.fn.expand('~/.config/nvim/code_runner.json'),
	-- project_path = vim.fn.expand('~/.config/nvim/project_manager.json')
}
'''

[[plugins]]
repo = "monaqa/dial.nvim"
on_map = { nx = ["<C-a>", "<C-x>", "g<C-a>", "g<C-x>"] }
lua_source = '''
vim.keymap.set({ 'n', 'x' }, '<C-a>', '<Plug>(dial-increment)')
vim.keymap.set({ 'n', 'x' }, '<C-x>', '<Plug>(dial-decrement)')
vim.keymap.set('x', 'g<C-a>', function() require 'dial.map'.manipulate('increment', 'gvisual') end)
vim.keymap.set('x', 'g<C-x>', function() require 'dial.map'.manipulate('decrement', 'gvisual') end)
vim.keymap.set('n', 'g<C-a>', function() require 'dial.map'.manipulate('increment', 'gnormal') end)
vim.keymap.set('n', 'g<C-x>', function() require 'dial.map'.manipulate('decrement', 'gnormal') end)

local augend = require 'dial.augend'
require 'dial.config'.augends:register_group {
	default = {
		augend.integer.alias.decimal,
		augend.semver.alias.semver,
		augend.integer.alias.hex,
		augend.constant.alias.bool,
		augend.date.alias['%Y/%m/%d'],
		augend.date.alias['%Y-%m-%d'],
	},
}
'''

[[plugins]]
repo = "lewis6991/gitsigns.nvim"
on_event = "CursorHold"
lua_source = '''
require 'gitsigns'.setup {
	numhl = true,
	signcolumn = false,
}

local function create_opfunc(name, inner)
	if type(inner) ~= 'table' then
		inner = {}
	end

	local opfunc = function(typ)
		if not typ or typ == '' then
			vim.api.nvim_set_option_value('operatorfunc', 'v:lua.' .. name, {})
			return 'g@'
		end

		-- Add highlights
		local pos = {}
		local _, line1, col1, _ = unpack(vim.fn.getpos "'[" or { 0, 0, 0, 0 })
		local _, line2, col2, _ = unpack(vim.fn.getpos "']" or { 0, 0, 0, 0 })
		if typ == 'line' then
			col2 = #vim.fn.getline(line2)
		end
		for line = line1, math.min(line2, vim.fn.line 'w$') do
			if line ~= line1 and line ~= line2 then
				table.insert(pos, vim.fn.matchaddpos('Visual', { line }))
			else
				local str = vim.fn.getline(line)
				local start_idx = line == line1 and col1 or 1
				local end_idx = line == line2 and col2 or #str
				for i = start_idx, end_idx do
					table.insert(pos, vim.fn.matchaddpos('Visual', { { line, i } }))
				end
			end
		end
		vim.cmd.redraw()

		if type(inner.on_select) == 'function' then
			inner.on_select(typ)
		end

		-- Remove highlights
		for _, id in pairs(pos) do
			vim.fn.matchdelete(id)
		end
		vim.cmd.redraw()

		if type(inner.callback) == 'function' then
			inner.callback(typ)
		end
	end
	_G[name] = opfunc
	return _G[name]
end

vim.keymap.set({ 'n', 'x' }, '<C-g>a', create_opfunc('_gitsigns_stage_hunk', {
	on_select = function(_)
		local startline = vim.fn.line "'["
		local endline = vim.fn.line "']"
		require 'gitsigns'.stage_hunk { startline, endline }
	end
}), { expr = true })
vim.keymap.set('n', '<C-g>aae', function() require 'gitsigns'.stage_buffer() end)

vim.keymap.set({ 'n', 'x' }, '<C-g>r', create_opfunc('_gitsigns_reset_hunk', {
	on_select = function(_)
		local startline = vim.fn.line "'["
		local endline = vim.fn.line "']"
		require 'gitsigns'.reset_hunk { startline, endline }
	end
}), { expr = true })

vim.keymap.set('n', '<C-g>k', function() require 'gitsigns'.preview_hunk_inline() end)
vim.keymap.set('n', ']<C-g>', function() require 'gitsigns'.nav_hunk 'next' end)
vim.keymap.set('n', '[<C-g>', function() require 'gitsigns'.nav_hunk 'prev' end)
'''

[[plugins]]
repo = "Darazaki/indent-o-matic"
on_event = "BufRead"
lua_source = "require 'indent-o-matic'.setup{}"

# Discord Rich Presence
[[plugins]]
repo = "andweeb/presence.nvim"
on_event = "CursorHold"
lua_source = "require 'presence'.setup()"

[[plugins]]
repo = "9seconds/repolink.nvim"
on_cmd = "RepoLink"
lua_source = "require 'repolink'.setup()"

[[plugins]]
repo = "NvChad/showkeys"
on_cmd = "ShowkeysToggle"
lua_source = '''
require 'showkeys'.setup {
	maxkeys = 10,
}
'''

[[plugins]]
repo = "kdheepak/lazygit.nvim"
on_cmd = [
	"LazyGit",
	"LazyGitConfig",
	"LazyGitCurrentFile",
	"LazyGitFilter",
	"LazyGitFilterCurrentFile",
]
hook_add = "nnoremap gll <cmd>LazyGit<cr>"
hook_source = '''
let $VISUAL = $EDITOR
let $GIT_EDITOR = $EDITOR
'''
depends = "plenary.nvim"

[[plugins]]
repo = "Wansmer/symbol-usage.nvim"
on_event = "BufReadPre"
lua_source = '''
local function h(name) return vim.api.nvim_get_hl(0, { name = name }) end

-- hl-groups can have any name
vim.api.nvim_set_hl(0, 'SymbolUsageRounding', { fg = h 'CursorLine'.bg, italic = true })
vim.api.nvim_set_hl(0, 'SymbolUsageContent', { bg = h 'CursorLine'.bg, fg = h 'Comment'.fg, italic = true })
vim.api.nvim_set_hl(0, 'SymbolUsageRef', { fg = h 'Function'.fg, bg = h 'CursorLine'.bg, italic = true })
vim.api.nvim_set_hl(0, 'SymbolUsageDef', { fg = h 'Type'.fg, bg = h 'CursorLine'.bg, italic = true })
vim.api.nvim_set_hl(0, 'SymbolUsageImpl', { fg = h '@keyword'.fg, bg = h 'CursorLine'.bg, italic = true })

local function text_format(symbol)
	local res = {}

	if symbol.references then
		local usage = symbol.references <= 1 and 'usage' or 'usages'
		local num = symbol.references == 0 and 'no' or symbol.references
		table.insert(res, { '󰌹 ', 'SymbolUsageRef' })
		table.insert(res, { ('%s %s'):format(num, usage), 'SymbolUsageContent' })
	end

	-- if symbol.definition then
	-- 	if #res > 0 then
	-- 		table.insert(res, { ' ', 'NonText' })
	-- 	end
	-- 	table.insert(res, { '󰳽 ', 'SymbolUsageDef' })
	-- 	table.insert(res, { symbol.definition .. ' defs', 'SymbolUsageContent' })
	-- end

	if symbol.implementation then
		if #res > 0 then
			table.insert(res, { ' ', 'NonText' })
		end
		table.insert(res, { '󰡱 ', 'SymbolUsageImpl' })
		table.insert(res, { symbol.implementation .. ' impls', 'SymbolUsageContent' })
	end

	return res
end

require 'symbol-usage'.setup {
	text_format = text_format,
	vt_position = 'end_of_line',
	implementation = { enabled = true },
}
'''

[[plugins]]
repo = "FabijanZulj/blame.nvim"
on_cmd = "BlameToggle"
hook_add = '''
nno <leader>b <cmd>BlameToggle<cr>
'''
lua_source = "require 'blame'.setup()"

[[plugins]]
repo = "chomosuke/term-edit.nvim"
lua_source = "require 'term-edit'.setup{ prompt_end = '%3 ' }"
on_event = "TermOpen"

[[plugins]]
repo = "icholy/lsplinks.nvim"
on_event = "CursorHold"
lua_source = '''
local lsplinks = require 'lsplinks'
lsplinks.setup()
vim.keymap.set('n', 'gx', lsplinks.gx)
'''

# 命名規則を相互変換
[[plugins]]
repo = "gregorias/coerce.nvim"
depends = "coop.nvim"
on_event = "CursorHold"
lua_source = '''
require 'coerce'.setup {
	default_mode_keymap_prefixes = {
		normal_mode = 'cr',
		motion_mode = "cr",
		visual_mode = "cr",
	}
}
'''

[[plugins]]
repo = "gw31415/emjpick.vim"
on_event = "CmdlineEnter"
hook_add = '''
command! Emoji call emjpick#insert()
'''

[[plugins]]
repo = "ysmb-wtsg/in-and-out.nvim"
on_map = { i = "<C-CR>" }
lua_source = '''
vim.keymap.set('i', '<C-CR>', function () require 'in-and-out'.in_and_out() end)
'''

[[plugins]]
repo = "folke/snacks.nvim"
on_cmd = "Snacks"
lua_source = '''
require 'snacks'.setup {
	picker = { enabled = true }
}
vim.api.nvim_create_user_command('Snacks', 'lua require("snacks").picker()', {})
'''

[[plugins]]
repo = "gw31415/root.nvim"
on_cmd = "Root"
lua_source = '''
local quiet = true
-- Timer for startup 20ms to avoid noisy-messages on startup
vim.defer_fn(function()
	quiet = false
end, 20)
vim.api.nvim_create_user_command('Root', function(opts)
	require 'root'.cd(opts.args, quiet)
end, {
	nargs = '?',
	complete = 'file',
})
'''
