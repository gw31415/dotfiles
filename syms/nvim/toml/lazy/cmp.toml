[[plugins]]
repo = "github/copilot.vim"
hook_add = '''
" let g:copilot_enabled = v:false " もしGitHub Copilotを一時的に無効にしたい場合はこの設定をする
let g:copilot_no_tab_map = v:true
let g:copilot_assume_mapped = v:true
let g:copilot_tab_fallback = ""
'''

[[plugins]]
repo = "hrsh7th/cmp-nvim-lsp"
[[plugins]]
repo = "hrsh7th/vim-vsnip"
[[plugins]]
repo = "hrsh7th/cmp-buffer"
[[plugins]]
repo = "hrsh7th/cmp-cmdline"
[[plugins]]
repo = "teramako/cmp-cmdline-prompt.nvim"
[[plugins]]
repo = "hrsh7th/cmp-nvim-lsp-signature-help"
[[plugins]]
repo = "petertriho/cmp-git"
depends = "plenary.nvim"
lua_source = "require 'cmp_git'.setup()"
[[plugins]]
repo = "lukas-reineke/cmp-under-comparator"

[[plugins]]
repo = "hrsh7th/nvim-cmp"
depends = [
	"cmp-nvim-lsp",
	"vim-vsnip",
	"cmp-buffer",
	"cmp-cmdline",
	"cmp-cmdline-prompt.nvim",
	"cmp-nvim-lsp-signature-help",
	"cmp-git",
	"cmp-under-comparator",
	"copilot.vim",
]
on_event = ["InsertEnter", "CmdlineEnter"]
lua_source = '''
local cmp = require 'cmp'
local function feedkeys(key)
	vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(key, true, true, true) or '', '', true)
end
cmp.setup {
	snippet = {
		expand = function(args)
			vim.fn['vsnip#anonymous'](args.body)
		end
	},
	window = {
		documentation = cmp.config.window.bordered()
	},
	sources = cmp.config.sources {
		{ name = 'lazydev',                group_index = 0 },
		{ name = 'nvim_lsp' },
		{ name = 'vsnip' },
		{ name = 'nvim_lsp_signature_help' },
	},
	comparators = {
		cmp.config.compare.offset,
		cmp.config.compare.exact,
		cmp.config.compare.score,
		require 'cmp-under-comparator'.under,
		cmp.config.compare.kind,
		cmp.config.compare.sort_text,
		cmp.config.compare.length,
		cmp.config.compare.order,
	},
	mapping = {
		['<C-p>'] = cmp.mapping.select_prev_item { behavior = cmp.SelectBehavior.Select },
		['<C-n>'] = cmp.mapping.select_next_item { behavior = cmp.SelectBehavior.Select },
		['<C-b>'] = cmp.mapping.scroll_docs(-4),
		['<C-f>'] = cmp.mapping.scroll_docs(4),
		['<C-y>'] = cmp.mapping.confirm(),
		['<C-e>'] = cmp.mapping.close(),
		['<Tab>'] = cmp.mapping(function(fallback)
			if cmp.visible() and cmp.get_selected_entry() then
				cmp.confirm()
			elseif vim.fn['vsnip#jumpable'](1) == 1 then
				feedkeys '<Plug>(vsnip-jump-next)'
			else
				local copilot_keys = vim.fn['copilot#Accept']()
				if copilot_keys ~= '' then
					vim.api.nvim_feedkeys(copilot_keys, 'i', true)
				else
					fallback()
				end
			end
		end),
		['<S-Tab>'] = cmp.mapping(function(fallback)
			if vim.fn['vsnip#jumpable'](-1) == 1 then
				feedkeys '<Plug>(vsnip-jump-prev)'
			else
				fallback()
			end
		end),
	}
}
cmp.setup.cmdline({ '/', '?' }, {
	mapping = cmp.mapping.preset.cmdline(),
	sources = {
		{ name = 'buffer' }
	}
})
cmp.setup.cmdline(':', {
	mapping = cmp.mapping.preset.cmdline(),
	sources = cmp.config.sources {
		{ name = 'cmdline' }
	}
})
cmp.setup.cmdline('@', {
	mapping = cmp.mapping.preset.cmdline(),
	sources = cmp.config.sources {
		{ name = 'cmdline-prompt' },
	},
})
cmp.setup.filetype('gitcommit', {
	sources = cmp.config.sources {
		{ name = 'git' },
	}
})
'''

# [[plugins]]
# repo = "rafamadriz/friendly-snippets"
#
# [[plugins]]
# repo = "saghen/blink.compat"
# rev = "*"
# lua_source = "require 'blink.compat.setup()'"
#
# [[plugins]]
# repo = "saghen/blink.cmp"
# rev = "v0.*"
# depends = ["friendly-snippets", "blink.compat"]
# on_event = ["InsertEnter", "CmdlineEnter"]
# lua_source = '''
# require 'blink.cmp'.setup {
# 	signature = { enabled = true },
# 	sources = {
# 		default = { 'lsp', 'path', 'snippets', 'buffer' },
# 	},
# 	windows = {
# 		documentation = {
# 			auto_show = true,
# 		}
# 	}
# }
# '''
