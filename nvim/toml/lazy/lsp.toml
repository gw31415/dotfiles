[[plugins]]
repo = "folke/lazydev.nvim"
on_ft = "lua"
depends = ["nvim-lspconfig", "mason.nvim"]
lua_source = '''
require 'lazydev'.setup {
	library = {
		{ path = '${3rd}/luv/library',                words = { 'vim%.uv' } },
		{ path = '~/.nix-deliverables/wezterm-types', mods = { 'wezterm' } },
	},
}
'''

[[plugins]]
repo = "aznhe21/actions-preview.nvim"
on_lua = "actions-preview"
depends = "nui.nvim"
lua_source = '''
 local hl = require 'actions-preview.highlight'
 require 'actions-preview'.setup {
 	backend = { 'nui' },
 	highlight_command = {
 		hl.delta 'delta --no-gitconfig --side-by-side',
 	},
 }
'''

[[plugins]]
repo = "SmiteshP/nvim-navic"
lua_source = '''
require 'nvim-navic'.setup {
	lsp = { auto_attach = true }
}
'''

[[plugins]]
repo = "onsails/diaglist.nvim"
on_event = "LspAttach"
lua_source = '''
vim.api.nvim_create_user_command('Diaglist', function()
	require 'diaglist.quickfix'.populate_qflist()
end, { force = true })
require 'diaglist'.init()
require 'diaglist.quickfix'.populate_qflist()
'''

[[plugins]]
repo = "neovim/nvim-lspconfig"
depends = "nvim-navic"

[[plugins]]
repo = "stevearc/conform.nvim"
on_event = ["BufWritePre", "LspAttach"]
on_cmd = "ConformInfo"
lua_source = '''
-- local js_formatters = { 'biome', 'prettierd', 'prettier', stop_after_first = true }
require 'conform'.setup {
	toml = { 'taplo', },
	python = { 'ruff', 'isort', 'black' },
	-- formatters_by_ft = {
	-- 	json = js_formatters,
	-- 	javascript = js_formatters,
	-- 	javascriptreact = js_formatters,
	-- 	typescript = js_formatters,
	-- 	typescriptreact = js_formatters,
	-- 	astro = js_formatters,
	-- },
}
'''

[[plugins]]
repo = "williamboman/mason.nvim"
lua_source = "require 'mason'.setup()"
[[plugins]]
repo = "nvimtools/none-ls.nvim"
depends = "plenary.nvim"
lua_source = "require 'null-ls'.setup()"
[[plugins]]
repo = "williamboman/mason-lspconfig.nvim"
depends = ["mason.nvim", "nvim-lspconfig", "nvim-cmp"]
on_event = "CursorHold"
lua_source = '''
local lspconfig = require 'lspconfig'

local lsp_opts = {
	capabilities = vim.tbl_deep_extend('keep', {
		workspace = {
			didChangeWatchedFiles = {
				dynamicRegistration = true,
			},
		},
		textDocument = {
			foldingRange = {
				dynamicRegistration = false,
				lineFoldingOnly = true
			},
		}
	}, require 'cmp_nvim_lsp'.default_capabilities()),
	-- }, require 'blink.cmp'.get_lsp_capabilities()),
	settings = {
		Lua = {
			format = {
				defaultConfig = {
					quote_style = 'single',
					call_arg_parentheses = 'remove',
				},
			},
		},
		texlab = {
			build = {
				executable = 'tectonic',
				args = {
					'-X',
					'compile',
					'%f',
					'--synctex',
					'--keep-logs',
					'--keep-intermediates',
				},
			},
		},
		['rust-analyzer'] = {
			checkOnSave = {
				command = 'clippy',
			},
		},
		pylsp = {
			plugins = {
				-- Disable all pylsp plugins
				mccabe = { enabled = false },
				pycodestyle = { enabled = false },
				pyflakes = { enabled = false },
				autopep8 = { enabled = false },
				yapf = { enabled = false },
			},
		},
		typescript = {
			suggest = {
				completionFunctionCalls = true,
			},
			inlayHints = {
				parameterNames = {
					enabled = 'literals', -- 'none' | 'literals' | 'all'
					suppressWhenArgumentMatchesName = true,
				},
				parameterTypes = { enabled = false },
				variableTypes = { enabled = false },
				propertyDeclarationTypes = { enabled = true },
				functionLikeReturnTypes = { enabled = false },
				enumMemberValues = { enabled = true },
			},
		},
		javascript = {
			inlayHints = {
				parameterNames = {
					enabled = 'literals', -- 'none' | 'literals' | 'all'
					suppressWhenArgumentMatchesName = true,
				},
				parameterTypes = { enabled = false },
				variableTypes = { enabled = false },
				propertyDeclarationTypes = { enabled = true },
				functionLikeReturnTypes = { enabled = false },
				enumMemberValues = { enabled = true },
			}

		},
	}
}

------------------------------------
-- Masonで追加されないLSPの設定
------------------------------------

local function executable(cmd)
	return vim.fn.executable(cmd) == 1
end

-- https://github.com/ndonfris/fish-lsp/
if executable 'fish-lsp' then
	require 'lspconfig'.fish_lsp.setup(lsp_opts)
end

if executable 'protols' then
	lspconfig.protols.setup(vim.tbl_deep_extend('keep', lsp_opts, {
		on_attach = function(client, _)
			client.server_capabilities.documentFormattingProvider = false
		end,
	}))
end

if executable 'sourcekit-lsp' then
	lspconfig.sourcekit.setup(lsp_opts)
end

if executable 'nu' then
	lspconfig.nushell.setup {}
end

------------------------------------
-- 特別な分岐が必要なLSPの設定
------------------------------------

local ft = {
	node_files = {
		'node_modules',
		'bun.lockb',     -- bun
		'package-lock.json', -- npm or bun
		'npm-shrinkwrap.json', -- npm
		'yarn.lock',     -- yarn
		'pnpm-lock.yaml', -- pnpm
	},
	node_specific_files = {
		'package.json',
		'node_modules',
		'bun.lockb',     -- bun
		'package-lock.json', -- npm or bun
		'npm-shrinkwrap.json', -- npm
		'yarn.lock',     -- yarn
		'pnpm-lock.yaml', -- pnpm
	},
	deno_files = {
		'deno.json',
		'deno.jsonc',
		'deno.lock',
		'denops',
		'package.json',
	},
}

lspconfig.biome.setup(vim.tbl_deep_extend('keep', lsp_opts, {
	root_markers = { 'biome.json' },
	workspace_required = true,
	single_file_support = false,
}))

lspconfig.denols.setup(vim.tbl_deep_extend('keep', lsp_opts, {
	-- root_markers = {
	-- 	'deno.json',
	-- 	'deno.jsonc',
	-- 	'deno.lock',
	-- 	'deps.ts',
	-- 	'denops',
	-- },
	root_dir = function(path)
		---@type string|nil
		local project_root =
			vim.fs.root(path, vim.iter { '.git', ft.deno_files, ft.node_specific_files }:flatten(math.huge):totable())
		project_root = project_root or vim.env.PWD

		local is_node_files_found = vim.iter(ft.node_specific_files):any(function(file)
			return vim.uv.fs_stat(vim.fs.joinpath(project_root, file)) ~= nil
		end)

		-- when node files not found, launch denols
		if not is_node_files_found then
			local deps_path = vim.fs.joinpath(project_root, 'deps.ts')
			if vim.uv.fs_stat(deps_path) ~= nil then
				vim.b[vim.fn.bufnr()].deno_deps_candidate = deps_path
			end
			return project_root
		end

		-- stop denols if vtsls or tsserver is running
		vim.defer_fn(
			vim.schedule_wrap(function()
				local vtslsClients = vim.lsp.get_clients { name = 'vtsls', bufnr = 0 }
				local denoClients = vim.lsp.get_clients { name = 'denols', bufnr = 0 }
				local tsserverClients = vim.lsp.get_clients { name = 'tsserver', bufnr = 0 }
				if (#vtslsClients + #tsserverClients) > 0 and #denoClients > 0 then
					vim.iter(denoClients):each(function(client)
						client.stop()
					end)
				end
			end),
			1000
		)
		-- otherwise, return nil
		return nil
	end,
	init_options = {
		lint = true,
		unstable = true,
		suggest = {
			imports = {
				hosts = {
					['https://deno.land'] = true,
					['https://cdn.nest.land'] = true,
					['https://crux.land'] = true,
				},
			},
		},
	},
	on_attach = function(client, bufnr)
		local biomeRunning = #(vim.lsp.get_clients { name = 'biome', bufnr = bufnr }) > 0
		client.server_capabilities.documentFormattingProvider = not biomeRunning
		client.server_capabilities.documentRangeFormattingProvider = not biomeRunning
	end,
}))

lspconfig.vtsls.setup(vim.tbl_deep_extend('keep', lsp_opts, {
	single_file_support = false,
	root_dir = function(path)
		local project_root = vim.fs.root(path, vim.iter { '.git', ft.node_files }:flatten(math.huge):totable())

		if project_root == nil then
			return nil
		end

		local is_node_files_found = vim.iter(ft.node_specific_files):any(function(file)
			return vim.uv.fs_stat(vim.fs.joinpath(project_root, file)) ~= nil
		end)

		if is_node_files_found then
			return project_root
		end

		return nil
	end,
	on_attach = function(client, bufnr)
		local biomeRunning = #(vim.lsp.get_clients { name = 'biome', bufnr = bufnr }) > 0
		client.server_capabilities.documentFormattingProvider = not biomeRunning
		client.server_capabilities.documentRangeFormattingProvider = not biomeRunning
	end,
}))

lspconfig.pylsp.setup(vim.tbl_deep_extend('keep', lsp_opts, {
	on_attach = function(client, _)
		client.server_capabilities.documentFormattingProvider = false
		client.server_capabilities.documentRangeFormattingProvider = false
	end,
}))
lspconfig.jsonls.setup(vim.tbl_deep_extend('keep', lsp_opts, {
	on_attach = function(client, _)
		client.server_capabilities.documentFormattingProvider = false
		client.server_capabilities.documentRangeFormattingProvider = false
	end,
}))


------------------------------------
--- Masonで追加されるLSPの設定
------------------------------------

require 'mason-lspconfig'.setup_handlers {
	function(server_name)
		if vim.list_contains({ 'vtsls', 'biome', 'denols', 'pylsp' }, server_name) then
			return
		end
		require 'lspconfig'[server_name].setup(lsp_opts)
	end,
}
'''

[[plugins]]
repo = "jay-babu/mason-null-ls.nvim"
depends = ["mason.nvim", "none-ls.nvim"]
on_event = "CursorHold"
lua_source = '''
require 'mason-null-ls'.setup {
	automatic_setup = true,
	handlers = {
		function(sourcename, methods)

			-- Disable biome in null-ls because it works as a standalone LSP
			if sourcename == 'biome' then
				return
			else
				require('mason-null-ls').default_setup(sourcename, methods)
			end
		end,
	},
}
'''

[[plugins]]
repo = "rachartier/tiny-inline-diagnostic.nvim"
on_event = "LspAttach"
lua_source = '''
require 'tiny-inline-diagnostic'.setup {
	options = {
		multiple_diag_under_cursor = true,
		show_all_diags_on_cursorline = true,
		multilines = {
			enabled = true,
			always_show = true,
		},
	},
}
'''
