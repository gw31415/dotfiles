[[plugins]]
repo = "neovim/nvim-lspconfig"
on_cmd = ["LspInfo", "LspStart", "LspRestart", "LspStop", "LspLog"]
on_lua = "lspconfig"

[[plugins]]
repo = "folke/lazydev.nvim"
on_ft = "lua"
depends = ["nvim-lspconfig", "mason.nvim"]
lua_source = '''
require 'lazydev'.setup {
	library = {
		{ path = '${3rd}/luv/library',                words = { 'vim%.uv' } },
		{ path = '~/.nix-deliverables/wezterm-types', mods = { 'wezterm' } },
	},
}
'''

[[plugins]]
repo = "aznhe21/actions-preview.nvim"
on_lua = "actions-preview"
depends = "nui.nvim"
lua_source = '''
 local hl = require 'actions-preview.highlight'
 require 'actions-preview'.setup {
 	backend = { 'nui' },
 	highlight_command = {
 		hl.delta 'delta --no-gitconfig --side-by-side',
 	},
 }
'''

[[plugins]]
repo = "SmiteshP/nvim-navic"
on_event = "LspAttach"
lua_source = '''
require 'nvim-navic'.setup {
	lsp = { auto_attach = true }
}
'''

[[plugins]]
repo = "onsails/diaglist.nvim"
on_event = "LspAttach"
lua_source = '''
vim.api.nvim_create_user_command('Diaglist', function()
	require 'diaglist.quickfix'.populate_qflist()
end, { force = true })
require 'diaglist'.init()
require 'diaglist.quickfix'.populate_qflist()
'''

[[plugins]]
repo = "stevearc/conform.nvim"
on_event = ["BufWritePre", "LspAttach"]
on_cmd = "ConformInfo"
lua_source = '''
-- local js_formatters = { 'biome', 'prettierd', 'prettier', stop_after_first = true }
require 'conform'.setup {
	toml = { 'taplo', },
	python = { 'ruff', 'isort', 'black' },
	-- formatters_by_ft = {
	-- 	json = js_formatters,
	-- 	javascript = js_formatters,
	-- 	javascriptreact = js_formatters,
	-- 	typescript = js_formatters,
	-- 	typescriptreact = js_formatters,
	-- 	astro = js_formatters,
	-- },
}
'''

[[plugins]]
repo = "williamboman/mason.nvim"
lua_source = "require 'mason'.setup()"
[[plugins]]
repo = "nvimtools/none-ls.nvim"
depends = "plenary.nvim"
lua_source = "require 'null-ls'.setup()"
[[plugins]]
repo = "williamboman/mason-lspconfig.nvim"
depends = ["mason.nvim", "nvim-lspconfig", "nvim-cmp"]
on_event = "CursorHold"
lua_source = '''
vim.lsp.config('*', {
	capabilities = vim.tbl_deep_extend('keep', {
		workspace = {
			didChangeWatchedFiles = {
				dynamicRegistration = true,
			},
		},
		textDocument = {
			foldingRange = {
				dynamicRegistration = false,
				lineFoldingOnly = true
			},
		}
	}, require 'cmp_nvim_lsp'.default_capabilities()),
	-- }, require 'blink.cmp'.get_lsp_capabilities()),
})

------------------------------------
-- Masonで追加されないLSPの設定
------------------------------------

local function executable(cmd)
	return vim.fn.executable(cmd) == 1
end

-- https://github.com/ndonfris/fish-lsp/
if executable 'fish-lsp' then
	vim.lsp.enable 'fish_lsp'
end

if executable 'sourcekit-lsp' then
	vim.lsp.enable 'sourcekit'
end

if executable 'nu' then
	vim.lsp.enable 'nushell'
end

vim.lsp.enable(require 'mason-lspconfig'.get_installed_servers())
'''

[[plugins]]
repo = "jay-babu/mason-null-ls.nvim"
depends = ["mason.nvim", "none-ls.nvim"]
on_event = "CursorHold"
lua_source = '''
require 'mason-null-ls'.setup {
	automatic_setup = true,
	handlers = {
		function(sourcename, methods)

			-- Disable biome in null-ls because it works as a standalone LSP
			if sourcename == 'biome' then
				return
			else
				require('mason-null-ls').default_setup(sourcename, methods)
			end
		end,
	},
}
'''

[[plugins]]
repo = "rachartier/tiny-inline-diagnostic.nvim"
on_event = "LspAttach"
lua_source = '''
require 'tiny-inline-diagnostic'.setup {
	options = {
		multiple_diag_under_cursor = true,
		show_all_diags_on_cursorline = true,
		multilines = {
			enabled = true,
			always_show = true,
		},
	},
}
'''
