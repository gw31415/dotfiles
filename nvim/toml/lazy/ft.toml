[[plugins]]
repo = "ogaken-1/nvim-gin-preview"
on_ft = "gin-status"

[[plugins]]
repo = "akinsho/org-bullets.nvim"
lua_source = '''
require 'org-bullets'.setup {
	symbols = {
		headlines = {
			'◉', '◊', '▹',
			'◉', '◊', '▹',
			'◉', '◊', '▹',
			'◉', '◊', '▹',
		}
	},
}
'''
[[plugins]]
repo = "danilshvalov/org-modern.nvim"
[[plugins]]
repo = "nvim-orgmode/orgmode"
on_ft = "org"
on_event = "CursorHold"
depends = ["org-bullets.nvim", "vim-repeat", "org-modern.nvim"]
lua_source = '''
local Menu = require 'org-modern.menu'
vim.keymap.set('n', '<Leader>o', '<Nop>', {})
require 'orgmode'.setup {
	mappings = {
		disable_all = false,
	},
	ui = {
		menu = {
			handler = function(data)
				Menu:new {
					window = {
						margin = { 1, 0, 1, 0 },
						padding = { 0, 1, 0, 1 },
						title_pos = 'center',
						border = 'single',
						zindex = 1000,
					},
					icons = {
						separator = '➜',
					},
				}:open(data)
			end,
		},
	},
	org_agenda_files = { '~/iCloud_Drive/org/*' },
	org_default_notes_file = '~/iCloud_Drive/org/refile.org',
	org_capture_templates = {
		n = {
			description = 'Default Note',
			template = '* %?\n %U',
		},
		t = {
			description = 'Task',
			template = '* TODO %?\n  %u',
			target = '~/iCloud_Drive/org/tasks.org',
		},
	},
}
'''

[[plugins]]
repo = "iamcco/markdown-preview.nvim"
on_ft = ["markdown", "pandoc.markdown", "rmd"]
build = 'sh -c "cd app && npm install"'

[[plugins]]
repo = "MeanderingProgrammer/render-markdown.nvim"
depends = "nvim-treesitter"
on_ft = ["markdown", "mdx", "mstdn", "Avante"]
lua_source = '''
require 'render-markdown'.setup {
	heading = {
		width = 'block',
		left_pad = 0,
		right_pad = 4,
		icons = {},
	},
	render_modes = true,
	code = {
		width = 'block',
	},
	file_types = { 'markdown', 'mdx', 'mstdn', 'Avante' },
}
'''

[[plugins]]
repo = "folke/ts-comments.nvim"
on_event = "CursorHold"
lua_source = '''
require 'ts-comments'.setup()
'''

[[plugins]]
repo = "akinsho/flutter-tools.nvim"
on_ft = "dart"
depends = ["plenary.nvim"]
lua_source = '''
require 'flutter-tools'.setup {
	flutter_lookup_cmd = 'mise where flutter',
	lsp = {
		color = {
			enabled = true,
			virtual_text = true,
		}
	},
}
'''

[[plugins]]
repo = "mrcjkb/rustaceanvim"
on_ft = "rust"

[[plugins]]
repo = "mattn/emmet-vim"
on_ft = ["html", "jsx", "tsx", "astro", "typescriptreact", "javascriptreact"]
hook_source = '''
let g:user_emmet_leader_key='<C-Z>'
'''

[[plugins]]
repo = "saecki/crates.nvim"
rev = "stable"
depends = "plenary.nvim"
on_ft = "toml"
lua_source = "require 'crates'.setup()"

[[plugins]]
repo = "rest-nvim/rest.nvim"
on_ft = "http"
depends = "plenary.nvim"
hook_add = '''
autocmd BufEnter *.http call s:set_rest_keymap()
function! s:set_rest_keymap()
	setl ft=http
	nn <buffer> <C-m> <Plug>RestNvim
endfunction
'''
lua_source = '''
require 'rest-nvim'.setup {
	result_split_horizontal = false,
}
'''

[[plugins]]
repo = "kaarmu/typst.vim"
on_ft = "typst"
lua_source = '''
-- Wrapped TypstWatch Command with custom opener (because Rust's `open::with` not works properly now, on my MacOS at least)
vim.api.nvim_create_autocmd('FileType', {
	pattern = 'typst',
	callback = function()
		vim.fn.timer_start(100, function()
			vim.api.nvim_buf_create_user_command(0, 'TypstWatch', function(opts)
				-- Create temporary functions for silent execution
				local funcname = 'typst_cache_zcGJN0nypnqo'
				_G[funcname] = function()
					local root = vim.fs.dirname(vim.fs.find('.git', { path = vim.fn.expand '%', upward = true })[1])
					local args = root and { '--root', root, unpack(opts.fargs) } or opts.fargs
					vim.fn['typst#TypstWatch'](unpack(args))
					_G[funcname] = nil
				end

				-- If the terminal-app is not WezTerm ↓
				if vim.fn.getenv 'WEZTERM_EXECUTABLE' == vim.NIL then
					vim.cmd('silent lua _G.' .. funcname .. '()')
					return
				end
				-- If the terminal-app is WezTerm ↓↓

				vim.g.typst_pdf_viewer = ':' -- Unix Dummy command
				vim.cmd('silent lua _G.' .. funcname .. '()')

				-- Setup the event watcher
				local handle = vim.uv.new_fs_event()
				if not handle then
					return
				end

				-- Stoppers of the event watcher
				local event_stopper = function()
					vim.uv.fs_event_stop(handle)
					handle:close()
				end
				local autocmd_ID, timeout_ID
				autocmd_ID = vim.api.nvim_create_autocmd('BufWipeout', {
					buffer = 0,
					callback = function()
						vim.fn.timer_stop(timeout_ID)
						event_stopper()
					end,
					once = true,
				})
				timeout_ID = vim.fn.timer_start(3000, function()
					vim.notify 'PDF not found in 3 seconds.'
					vim.api.nvim_del_autocmd(autocmd_ID)
					event_stopper()
				end)
				local function stop_all()
					vim.api.nvim_del_autocmd(autocmd_ID)
					vim.fn.timer_stop(timeout_ID)
					event_stopper()
				end

				local cwd = vim.fn.getcwd()
				vim.notify 'Searching the new PDF....'
				vim.uv.fs_event_start(handle, cwd, {
					recursive = true,
					pattern = '*.pdf',
				}, function(err, filename, events)
					if err then
						return
					end
					if events.change then
						vim.schedule(function()
							local prior_process_code = nil
							if vim.b.typst_pdf_pane then
								prior_process_code = vim.system { 'wezterm', 'cli', 'activate-pane', '--pane-id', vim.b
									.typst_pdf_pane }:wait().code
							end

							if prior_process_code ~= 0 then
								vim.system({ 'wezterm', 'cli', 'split-pane', '--right', '--', 'tdf', filename }, {
									cwd = cwd,
								}, function(out)
									if out.stdout then
										local num = tonumber(out.stdout)
										if not num then
											vim.notify('Error parsing pane-id: ' .. out.stdout)
											return
										end
										vim.b.typst_pdf_pane = num
									end
								end)
							end

							stop_all()
						end)
					end
				end)
			end, {
				nargs = '*',
				force = true,
			})
		end)
	end
})
'''

# For nushell Treesitter
[[plugins]]
repo = "LhKipp/nvim-nu"
on_ft = "nu"
depends = "nvim-treesitter"
lua_source = '''
require'nu'.setup{
	use_lsp_features = false,
}
'''

[[plugins]]
repo = "ixru/nvim-markdown"
on_ft = "markdown"
hook_source = "let g:vim_markdown_no_default_key_mappings = 1"

[ftplugin]
erg = "setl et"
python = '''
let s:venv = finddir('.venv/..', expand('%:p:h').';')
if s:venv != ''
	let s:venv = s:venv . '/.venv/bin/python'
	" exe $"autocmd InsertEnter <buffer> ++once PyrightSetPythonPath {s:venv}/.venv/bin/python"
endif
'''
